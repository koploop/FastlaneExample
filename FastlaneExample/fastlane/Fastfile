
fastlane_version "2.54.0"

default_platform :ios

# 打包Scheme
XKSConfig_Scheme = "FastlaneExample"
# 包名(FTP路径中也是使用这个,请注意)
XKSConfig_DisplayName = "TestApp"
# 打包输出路径
XKSConfig_OutputPath = "/Users/mario/Desktop/#{XKSConfig_DisplayName}/"
# 打包workspace
XKSConfig_Workspace = "FastlaneExample.xcworkspace"

# mark - FTP
# FTP IP
XKSConfig_FTPIP = "192.168.184.91"
# FTP地址
XKSConfig_FTPRemote = "ftp://192.168.184.91/IOS/"
# FTP账号
XKSConfig_FTPUser = "ios"
# FTP密码
XKSConfig_FTPPwd = "123456"

# mark - 邮件
# 邮件模板
XKSConfig_MailTemplate = "./fastlane/mail_template.html"
# 团队名
XKSConfig_Group = "XieTongJi Developer Group";
# 打包日志
XKSConfig_BuildLog = "Fix some bugs!"



platform :ios do

  # 任务之前执行的操作
  before_all do

    # XKSConfig_Version = get_info_plist_value(path: "FastlaneExample/Info.plist", key: "CFBundleShortVersionString")
    # XKSConfig_BuildNum = XKSConfig_Version + "_" + get_info_plist_value(path: "FastlaneExample/Info.plist", key: "CFBundleVersion")
    XKSConfig_Version = "1.0.0"
    XKSConfig_BuildNum = "1"
    XKSConfig_BuildName = "#{XKSConfig_DisplayName}" + "#{XKSConfig_Version}(#{XKSConfig_BuildNum})"

    # XKSConfig_OutputPath = ENV['ROOT_DIR'] + "/#{XKSConfig_DisplayName}/"
    # 输出Archive文件路径
    XKSConfig_ArchivePath = XKSConfig_OutputPath + "#{XKSConfig_BuildName}.xcarchive"
    # 输出IPA名字
    XKSConfig_iPAName = "#{XKSConfig_BuildName}.ipa"
            
  end


  desc "通用构建入口"
  desc "执行命令: bundle exec fastlane xks_build type:dev 或 fastlane xks_build type:dev"
  lane :xks_build do |options|

    XKSConfig_Configuration = "Debug"
    XKSConfig_Method = "development" #[app-store,ad-hoc,package,enterprise,development,developer-id]
    XKSConfig_Envment = "测试环境"
    XKSConfig_APIHost = "http://vip.test.xkeshi.so:8082/"

    case options[:type]
    when "beta"
      XKSConfig_Configuration = "Release"
      XKSConfig_Method = "ad-hoc"
      XKSConfig_Envment = "预发布环境"
      XKSConfig_APIHost = "http://vip.prepub.xkeshi.so:8082/"
    when "release"
      XKSConfig_Configuration = "Release"
      XKSConfig_Method = "app-store"
      XKSConfig_Envment = "正式环境"
      XKSConfig_APIHost = "http://vip.xkeshi.net/"
    end

    xks_cocoapods
    xks_step
  end


  desc "正式开始打包动作"
  lane :xks_step do
    gym(
        clean: true,
        include_symbols: true,
        include_bitcode: false,
        scheme: XKSConfig_Scheme,
        workspace: XKSConfig_Workspace, 
        # xcargs: xcodebuild_args,
        export_method: XKSConfig_Method,
        configuration: XKSConfig_Configuration,
        output_directory: XKSConfig_OutputPath,
        output_name: XKSConfig_iPAName,
        archive_path: XKSConfig_ArchivePath
      )

    xks_ftp
    xks_mail

  end


  desc "执行cocoapods操作"
  lane :xks_cocoapods do
    sh "git -C ~/.cocoapods/repos/XKSPrivatePods pull" # git -C <path> 让git在指定目录执行
    sh "git -C ~/.cocoapods/repos/LSPodSpec pull"
    # sh "git pull"
    # sh "git submodule foreach git pull"
    # pod install
    cocoapods 
  end


  desc "上传FTP"
  lane :xks_ftp do
    ftp(
      host: XKSConfig_FTPIP,
      username: XKSConfig_FTPUser,
      password: XKSConfig_FTPPwd,
      upload: {
        src: XKSConfig_OutputPath + XKSConfig_iPAName,
        dest: "/IOS/" + XKSConfig_DisplayName + "/#{XKSConfig_Envment}/#{XKSConfig_Version}/"
        }
      )

    ftp(
      host: XKSConfig_FTPIP,
      username: XKSConfig_FTPUser,
      password: XKSConfig_FTPPwd,
      upload: {
        src: XKSConfig_OutputPath + XKSConfig_BuildName + ".app.dSYM.zip",
        dest: "/IOS/" + XKSConfig_DisplayName + "/#{XKSConfig_Envment}/#{XKSConfig_Version}/"
        }
      )

  end

  # # 执行一些shell命令
  # desc "sh lane"
  # lane :xks_sh do
  #   sh(
  #     command: "export ROOT_DIR="/Users/$USER/Desktop""
  #     )
  # end


  desc "发送邮件"
  lane :xks_mail do
    mailgun(
      postmaster: "postmaster@sandbox1668d3cec5ea4f558277fc567c5d59a3.mailgun.org",
      apikey: "xxxxxx",
      to: "lh@xkeshi.com",
      from: XKSConfig_Group,
      success: true,
      template_path: XKSConfig_MailTemplate,
      subject: XKSConfig_DisplayName + " " + XKSConfig_Envment + " " + XKSConfig_BuildName,
      # message: XKSConfig_BuildLog + "," + XKSConfig_Group + "," + last_git_commit[:commit_hash] + "," + XKSConfig_Envment + "," + XKSConfig_BuildNum + "," + XKSConfig_APIHost,
      message: XKSConfig_BuildLog + "," + XKSConfig_Group + "," + "2addvfeefs" + "," + XKSConfig_Envment + "," + XKSConfig_BuildName + "," + XKSConfig_APIHost,
      app_link: XKSConfig_FTPRemote + XKSConfig_DisplayName + "/#{XKSConfig_Envment}/" + XKSConfig_iPAName
    )
  end

  
  desc "执行测试"
  lane :xks_test do
    scan
  end


  # 仅当上述流程全部执行[成功]后才会走这里
  after_all do |lane|
    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end


  # 如果流程发生[异常]会走这里并终止
  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end
